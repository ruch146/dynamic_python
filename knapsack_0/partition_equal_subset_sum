class Solution(object):
    nums=[3,34,4,12,5,2]
    def subset_sum(self,nums,summation,n):
        t=[[False for j in range(summation+1)] for i in range(n+1)]
        for i in range(n+1):
            for j in range(summation+1):
                if j==0:
                    t[i][j]=True
                if i==0 and j >0:
                    t[i][j]=False
        for i in range(1,n+1):
            for j in range(1,summation+1):
                if t[i-1][j]==True:
                    t[i][j]=True
                elif nums[i-1]<=j:
                    t[i][j]=t[i-1][j-nums[i-1]]
                else:
                    t[i][j]=False
        return t[n][summation]
    def canPartition(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        if sum(nums)%2 != 0:
            return False
        else:
            return self.subset_sum(nums,sum(nums)//2,len(nums))
    
